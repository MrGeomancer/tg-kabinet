import asyncio
from aiogram.fsm.state import StatesGroup, State
from aiogram import F, Router, Bot, Dispatcher, html
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton

import config
import database

router = Router()


class Kabinet_State(StatesGroup):
    Kabinet_main = State()
    Kabinet_cases = State()
    Kabinet_cases_new_ask = State()
    Kabinet_cases_new_ask_price = State()
    Kabinet_cases_new_ask_komment = State()


@router.message(F.text == "üë®‚Äçüè´ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
async def kabinet_main_page(message: Message, state: FSMContext):
    print('–∑–∞—à–µ–ª –≤ –∫–∞–±–∏–Ω–µ—Ç')
    await state.clear()
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='üß∞ –ú–æ–∏ –∫–µ–π—Å—ã'))
    builder.add(KeyboardButton(text='üí± –û–¥–∏–Ω–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'))
    builder.add(KeyboardButton(text='üí≤  –í–∞–ª—é—Ç–Ω—ã–µ'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    builder.adjust(2)
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç {html.bold(html.quote(message.from_user.full_name))}, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "
                              "–≤–Ω–µ—Å–µ–Ω–Ω—É—é —Ç–æ–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ\n‚ó¶ –ö–µ–π—Å–∞–º \n‚ó¶ –û–¥–∏–Ω–æ—á–Ω—ã–º –ø–æ–∫—É–ø–∫–∞–º \n‚ó¶ –í–∞–ª—é—Ç–∞–º, –∞ —Ç–∞–∫ –∂–µ, "
                              "–≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –ù–∞ —á—Ç–æ —Å–º–æ—Ç—Ä–∏–º?",
                         reply_markup=builder.as_markup(resize_keyboard=True),
                         parse_mode=ParseMode.HTML,
                         )
    await state.set_state(Kabinet_State.Kabinet_main)


@router.message(F.text == "üß∞ –ú–æ–∏ –∫–µ–π—Å—ã", Kabinet_State.Kabinet_main)
async def kabinet_my_cases(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚ùî –ò–∑–º–µ–Ω–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    builder.adjust(3)
    text = await database.take_names_and_prices(user_id=message.from_user.id)
    msg = ''
    for lot in text:
        print(lot)
        msg = msg + f'\n{lot[3]}.{html.bold(lot[0])} –∫—É–ø–ª–µ–Ω–Ω—ã–π –∑–∞ {html.bold(lot[1])} —Ä—É–±–ª–µ–π'
        if lot[2] is not None: msg = msg + f' ({lot[2]})'
    await message.answer(text=f"–¢–≤–æ–∏ –∫–µ–π—Å—ã:{msg}.\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                         reply_markup=builder.as_markup(resize_keyboard=True),
                         parse_mode=ParseMode.HTML,
                         )
    await state.set_state(Kabinet_State.Kabinet_cases)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', Kabinet_State.Kabinet_cases or Kabinet_State.Kabinet_cases_new_ask)
async def kabinet_back(message: Message, state: FSMContext):
    await state.clear()
    await kabinet_main_page(message, state)


@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å', Kabinet_State.Kabinet_cases)
async def kabinet_new(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.reply(text='–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–º –º–∞—Ä–∫–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –∫–µ–π—Å–∞ –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π '
                             '–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                        reply_markup=builder.as_markup(resize_keyboard=True)
                        )
    await state.set_state(Kabinet_State.Kabinet_cases_new_ask)


@router.message(F.text, Kabinet_State.Kabinet_cases_new_ask)
async def kabinet_new_ask(message: Message, state: FSMContext):
    await message.reply(text='–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –∫—É–ø–∏–ª?')
    await state.update_data(link=message.text)
    await state.set_state(Kabinet_State.Kabinet_cases_new_ask_price)


@router.message(F.text, Kabinet_State.Kabinet_cases_new_ask_price)
async def kabinet_new_ask_price(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await state.update_data(price=message.text)
    await message.reply(text='–ü—Ä–∏–Ω—è—Ç–æ, –∂–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...‚è≥')
    user_data = await state.get_data()
    text = await database.add_case(user_data, user_id=message.from_user.id)
    msg = (f'{text['name']} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ {user_data['price']}.'
           '\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–µ? '
           '–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')
    await message.answer(text=msg,
                         reply_markup=builder.as_markup(resize_keyboard=True)
                         )
    await state.set_state(Kabinet_State.Kabinet_cases_new_ask_komment)


@router.message(F.text, Kabinet_State.Kabinet_cases_new_ask_komment)
async def kabinet_new_ask_komment(message: Message, state: FSMContext):
    await state.update_data(komment=message.text)
    await database.add_komment(user_data=await state.get_data(), user_id=message.from_user.id)
    await message.reply(text='–ü—Ä–∏–Ω—è—Ç–æ.')
    await state.clear()
    await kabinet_my_cases(message, state)


@router.message(F.text == '‚ùî –ò–∑–º–µ–Ω–∏—Ç—å', Kabinet_State.Kabinet_cases)
async def kabinet_new(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.answer(text='–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç id –∫–µ–π—Å–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.'
                              '\nID –ø–∏—à–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø—Ä–∏ –∏—Ö –≤—ã–≤–æ–¥–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ. '
                              '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ ID —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ '
                              f'(<u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u>, <u>—Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏</u>, <u>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</u>)'
                              f'\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {html.bold('32, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')}',
                         parse_mode=ParseMode.HTML,
                         reply_markup=builder.as_markup(resize_keyboard=True)
                         )


async def kabinet_main():
    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot(config.bot_token)
    router = Dispatcher()
    await bot.delete_webhook(drop_pending_updates=True)
    await router.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(kabinet_main())
