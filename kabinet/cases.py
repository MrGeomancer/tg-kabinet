import asyncio
from aiogram.fsm.state import StatesGroup, State
from aiogram import F, Router, Bot, Dispatcher, html
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton
import logging

import database

router = Router()


class Kabinet_—Åases_state(StatesGroup):
    Kabinet_main = State()
    Kabinet_cases = State()
    Kabinet_cases_new_ask = State()
    Kabinet_cases_new_ask_price = State()
    Kabinet_cases_new_ask_count = State()
    Kabinet_cases_new_ask_komment = State()
    Kabinet_cases_chng_ask = State()
    Kabinet_cases_chng_value = State()
    Kabinet_cases_del = State()


changes_lists={
               'name':['–Ω–∞–∑–≤–∞–Ω–∏–µ','–∏–º—è','–∏'],
               'price':['—Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏', '—Ü–µ–Ω–∞', '—Ü–µ–Ω—É','—Å—Ç–æ–∏–º–æ—Å—Ç—å','—Ü'],
               'description':['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–∫–æ–º–º–µ–Ω—Ç','–æ–ø–∏—Å–∞–Ω–∏–µ','–∫–æ–º','–æ–ø–∏—Å–∞–Ω–∏–µ'],
               'count':['–∫–æ–ª-–≤–æ','–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ','–∫–æ–ª–≤–æ','–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ','–∑–∞–∫—É–ø','–æ–±—ä–µ–º','–∫','–∫–æ–ª'],
               }

changes_list=[]
for znach in changes_lists.values():
    for text in znach:
        changes_list.append(text)

changes_lists.update({"name_keys":len(changes_lists['name']),
                      "price_keys":len(changes_lists['price']),
                      "description_keys":len(changes_lists['description']),
                      "count_keys":len(changes_lists['count'])
                      })


async def take_change(index):
    if index+1 <= changes_lists['name_keys']:
        change_item = 'name'
    elif index+1 > changes_lists['name_keys'] and index+1 <= changes_lists['price_keys']+changes_lists['name_keys']:
        change_item = 'price'
    elif index+1 > changes_lists['price_keys']+changes_lists['name_keys'] and index+1 <= changes_lists['price_keys']+changes_lists['name_keys']+changes_lists['description_keys']:
        change_item = 'description'
    elif index+1 > changes_lists['price_keys']+changes_lists['name_keys']+changes_lists['description_keys']:
        change_item = 'count'
        # print(changes_lists)
        # print('index:',index)
    return change_item


@router.message(F.text == "üß∞ –ú–æ–∏ –∫–µ–π—Å—ã")
async def kabinet_cases_main(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚ùî –ò–∑–º–µ–Ω–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    builder.adjust(3)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–µ–π—Å–æ–≤
    builder2 = ReplyKeyboardBuilder()
    builder2.add(KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å'))
    builder2.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder2.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    builder2.adjust(2)
    text = await database.take_names_and_prices(user_id=message.from_user.id)
    # print(text)
    if text == []:
        builder
        await message.answer(text="–¢—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –∫–µ–π—Å–æ–≤ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç. –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
                             reply_markup=builder2.as_markup(resize_keyboard=True),
                             parse_mode=ParseMode.HTML,
                             )
    else:
        msg = ''
        for lot in text:
            # print("lot ",lot)
            msg = msg + f'\n{lot[3]}.{html.bold(lot[0])} –∫—É–ø–ª–µ–Ω–Ω—ã–π –∑–∞ {html.bold(f'{lot[1]}x{lot[4]}')} —Ä—É–±–ª–µ–π'
            if lot[2] is not None: msg = msg + f' <i>({lot[2]})</i>'
        await message.answer(text=f"–¢–≤–æ–∏ –∫–µ–π—Å—ã:{msg}.\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                             reply_markup=builder.as_markup(resize_keyboard=True),
                             parse_mode=ParseMode.HTML,
                             )
    await state.set_state(Kabinet_—Åases_state.Kabinet_cases)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', Kabinet_—Åases_state())
async def kabinet_back(message: Message, state: FSMContext):
    # print('–ø–æ–π–º–∞–ª –∫–æ–º–∞–Ω–¥—É –°—ä–µ–±–∞—Ç—å—Å—è')
    await state.clear()
    await kabinet_cases_main(message, state)


@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å', Kabinet_—Åases_state.Kabinet_cases)
async def kabinet_cases_new(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.reply(text='–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–º –º–∞—Ä–∫–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –∫–µ–π—Å–∞ –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π '
                             '–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                        reply_markup=builder.as_markup(resize_keyboard=True)
                        )
    await state.set_state(Kabinet_—Åases_state.Kabinet_cases_new_ask)


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_new_ask)
async def kabinet_cases_new_ask(message: Message, state: FSMContext):
    if message.text[:43] == 'https://steamcommunity.com/market/listings/':
        await message.reply(text='–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –∫—É–ø–∏–ª?')
        await state.update_data(link=message.text)
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_new_ask_price)
    else:
        # print(message.text[:44])
        # print('https://steamcommunity.com/market/listings/')
        await message.reply('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –∏–∑ –∞–¥—Ä–µ—Å—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–µ–π—Å–∞.')
        await message.answer(text='–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑.')


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_new_ask_price)
async def kabinet_new_ask_price(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    msg = message.text
    try:
        msg = float(msg.replace(",", "."))
        await state.update_data(price=message.text)
        await message.reply(text='–û–∫–µ–π, —Å–∫–æ–ª—å–∫–æ —Ç—ã –∏—Ö –∑–∞–∫—É–ø–∏–ª? ')
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_new_ask_count)
    except ValueError:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_new_ask_price)
    except Exception as e
        logging.error('—Å–ª–æ–≤–∏–ª —Ö—É–π–Ω—é %s def kabinet.cases.kabinet_new_ask_price', exc_info=e)
        pass


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_new_ask_count)
async def kabinet_new_ask_count(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    msg = message.text
    try:
        msg = int(msg)
        await state.update_data(count=msg)
        await message.reply(text='–ü—Ä–∏–Ω—è—Ç–æ, –∂–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...‚è≥')
        # await state.set_state(Ignor_user_State.Ignoring)
        user_data = await state.get_data()
        # print(user_data)
        text = await database.add_case(user_data, user_id=message.from_user.id)
        msg = (f'{text['name']} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ {user_data['price']} —Ä—É–±–ª–µ–π. –¢–æ–±–æ–π –±—ã–ª–æ –∑–∞–∫—É–ø–ª–µ–Ω–æ {user_data['count']} —à—Ç.'
               '\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–µ? '
               '–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É')
        await message.answer(text=msg,
                             reply_markup=builder.as_markup(resize_keyboard=True)
                             )
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_new_ask_komment)
    except ValueError:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
    except Exception as e:
        logging.error('—Å–ª–æ–≤–∏–ª —Ö—É–π–Ω—é %s def kabinet.cases.kabinet_new_ask_count', exc_info=e)
        await message.answer(f'–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–º—É–Ω–∏–±—É–¥—å –æ –Ω–µ–π\n{e}')
        pass


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_new_ask_komment)
async def kabinet_new_ask_komment(message: Message, state: FSMContext):
    await state.update_data(komment=message.text)
    await database.add_komment(user_data=await state.get_data(), user_id=message.from_user.id)
    await message.reply(text='–ü—Ä–∏–Ω—è—Ç–æ.')
    await state.clear()
    await kabinet_cases_main(message, state)


@router.message(F.text == '‚ùî –ò–∑–º–µ–Ω–∏—Ç—å', Kabinet_—Åases_state.Kabinet_cases)
async def kabinet_cases_change(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.answer(text='–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç id –∫–µ–π—Å–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.'
                              '\nID –ø–∏—à–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø—Ä–∏ –∏—Ö –≤—ã–≤–æ–¥–µ, –≤ –∫–∞–±–∏–Ω–µ—Ç–µ. '
                              '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ ID —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ '
                              '(<u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u>, <u>—Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏</u>, <u>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</u>, <u>–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ</u>)'
                              f'\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {html.bold('32, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')}',
                         parse_mode=ParseMode.HTML,
                         reply_markup=builder.as_markup(resize_keyboard=True)
                         )
    await state.set_state(Kabinet_—Åases_state.Kabinet_cases_chng_ask)


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_chng_ask)
async def kabinet_cases_change_ask(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    # print(message.text)
    msg = message.text.split(',')
    try: msg[1]=msg[1].strip().lower()
    except: pass
    if len(msg) > 2 or len(msg) < 2:
        # print('–º–Ω–æ–≥–æ –∑–∞–ø—è—Ç—ã—Ö')
        await message.reply(text='–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π.\n<b>ID</b>,<b>—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å</b>',
                            parse_mode=ParseMode.HTML,
                            reply_markup=builder.as_markup(resize_keyboard=True)
                            )
        await message.answer(text='–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑.')
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_chng_ask)
    elif msg[1] not in changes_list:
        # print('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')
        await message.reply(text='–¢–µ–±–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è–Ω—É—é –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤ –ø—Ä–æ—à–ª–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ –∏–∑ (<u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u>, <u>—Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏</u>, <u>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</u>, <u>–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ</u>)\n<b>ID</b>,<b>—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å</b>',
                            parse_mode=ParseMode.HTML,
                            reply_markup=builder.as_markup(resize_keyboard=True)
                            )
        await message.answer(text='–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑.')
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_chng_ask)
    elif not msg[0].isdigit():
        # print('id –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ —Ü–∏—Ñ—Ä–æ–π')
        await message.reply(text='–¢–µ–±–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID, –æ–Ω –ø–∏—à–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–µ–π—Å–∞.\n<b>ID</b>,<b>—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å</b>',
                            parse_mode=ParseMode.HTML,
                            reply_markup=builder.as_markup(resize_keyboard=True)
                            )
        await message.answer(text='–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑.')
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_chng_ask)
    else:
        await state.update_data(change_case_id=msg[0])
        change = await take_change(changes_list.index(msg[1]))
        await state.update_data(change_case_changeitem=change)
        await message.reply(text=f'–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä {change}',
                            parse_mode=ParseMode.HTML,
                            reply_markup=builder.as_markup(resize_keyboard=True)
                            )
        await state.set_state(Kabinet_—Åases_state.Kabinet_cases_chng_value)

@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_chng_value)
async def kabinet_cases_change_ask_value(message: Message, state: FSMContext):
    await message.reply(text='–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å')
    await state.update_data(change_case_changenew=message.text)
    user_data = await state.get_data()
    result = await database.change_smth(user_data, user_id=message.from_user.id)
    if result is True:
        await state.clear()
        await kabinet_cases_main(message, state)
    else:
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...')
        await state.clear()
        await kabinet_main_page(message, state)


@router.message(F.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å', Kabinet_—Åases_state.Kabinet_cases)
async def kabinet_new(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await message.answer(text='–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç id –∫–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.'
                              '\nID –ø–∏—à–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø—Ä–∏ –∏—Ö –≤—ã–≤–æ–¥–µ, –≤ –∫–∞–±–∏–Ω–µ—Ç–µ. '
                              '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ ID —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID',
                         parse_mode=ParseMode.HTML,
                         reply_markup=builder.as_markup(resize_keyboard=True)
                         )
    await state.set_state(Kabinet_—Åases_state.Kabinet_cases_del)


@router.message(F.text, Kabinet_—Åases_state.Kabinet_cases_del)
async def kabinet_new(message: Message, state: FSMContext):
    msg = message.text.split(',')
    for i in range(len(msg)):
        msg[i] = msg[i].strip()
    text = await database.del_case(msg, user_id=message.from_user.id)
    await message.reply(text)
    await state.clear()
    await kabinet_cases_main(message, state)
