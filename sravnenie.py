import asyncio
from aiogram.fsm.state import StatesGroup, State
from aiogram import F, Router, Bot, Dispatcher
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton

import config

router = Router()

class Sravn_State(StatesGroup):
    Sravnenie_gr_1 = State()
    Sravnenie_price_1 = State()
    Sravnenie_gr_2 = State()
    Sravnenie_price_2 = State()
    Sravnenie_price_result = State()


async def sravnenie(user_data):
    first_g = user_data['gr_1']
    first_p = user_data['pr_1']
    second_g = user_data['gr_2']
    second_p = user_data['pr_2']
    try:
        a = first_p / first_g
        b = second_p / second_g
        if a < b:
            d = a * 0.33
            if (a + d) < b and b / (a + d) > 1.05:
                c = f'{first_p} —Ä—É–±–ª–µ–π –∑–∞ {first_g} –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º {second_p} —Ä—É–±–ª–µ–π –∑–∞ {second_g} –≥—Ä–∞–º–º!\n–û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–æ!'
                e = '1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
            else:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!' % (
                    first_p, first_g, second_p, second_g)
                e = '1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
        elif a == b:
            c = '‚è∏–£ –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Ü–µ–Ω–∞'
            e = ""
        else:
            d = b * 0.33
            if (b + d) < a and a / (b + d) > 1.05:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!\n–û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–æ!' % (
                    second_p, second_g, first_p, first_g)
                e = '2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
            else:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!' % (
                    second_p, second_g, first_p, first_g)
                e = '2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
        return c +'\n'+ e
    except:
        return '–û—à–∏–±–∫–∞'


@router.message(F.text == "üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã")
async def sravnenie_cen1(message: Message, state: FSMContext):
    # print('–∑–∞—à–µ–ª')
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await state.clear()
    await message.answer(text="–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(Sravn_State.Sravnenie_gr_1)


@router.message(F.text, Sravn_State.Sravnenie_gr_1)
async def sravnenie_cen2(message: Message, state: FSMContext):
    # print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤')
    msg = message.text
    try:
        msg = float(msg.replace(",", "."))
        if msg < 10:
            await state.update_data(gr_1=msg*1000)
        else:
            await state.update_data(gr_1=msg)
        await message.reply('–ü—Ä–∏–Ω—è—Ç–æ, —Å–∫–æ–ª—å–∫–æ –æ–Ω —Å—Ç–æ–∏—Ç?')
        await state.set_state(Sravn_State.Sravnenie_price_1)
    except:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await state.set_state(Sravn_State.Sravnenie_gr_1)

@router.message(F.text, Sravn_State.Sravnenie_price_1)
async def sravnenie_cen3(message: Message, state: FSMContext):
    # print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã')
    msg = message.text
    try:
        msg = float(msg.replace(",", "."))
        await state.update_data(pr_1=msg)
        await message.answer('–ê —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?')
        await state.set_state(Sravn_State.Sravnenie_gr_2)
    except:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await state.set_state(Sravn_State.Sravnenie_price_1)


@router.message(F.text, Sravn_State.Sravnenie_gr_2)
async def sravnenie_cen4(message: Message, state: FSMContext):
    # print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤2')
    msg = message.text
    try:
        msg = float(msg.replace(",", "."))
        if msg < 10:
            await state.update_data(gr_2=msg*1000)
        else:
            await state.update_data(gr_2=msg)
        await message.reply('–ü—Ä–∏–Ω—è—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç?')
        await state.set_state(Sravn_State.Sravnenie_price_2)
    except:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await state.set_state(Sravn_State.Sravnenie_gr_2)

@router.message(F.text, Sravn_State.Sravnenie_price_2)
async def sravnenie_result(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    builder.add(KeyboardButton(text='‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    builder.adjust(1)
    # print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—Ö –≤—Å–µ—Ö')
    msg = message.text
    try:
        msg = float(msg.replace(",", "."))
        await state.update_data(pr_2=msg)
        user_data = await state.get_data()
        text = await sravnenie(user_data)
        await message.answer(text)
        await state.clear()
        await state.set_state(Sravn_State.Sravnenie_price_result)
        await message.answer(f'–ü—Ä–æ–¥–æ–ª–∂–∏–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?',
                             reply_markup=builder.as_markup(resize_keyboard=True)
                             )
    except:
        await message.reply('–í–≤–æ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await state.set_state(Sravn_State.Sravnenie_price_2)


@router.message(F.text == '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', Sravn_State.Sravnenie_price_result)
async def newone_srav(message: Message, state: FSMContext):
    await sravnenie_cen1(message, state)



async def srav_main():
    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot(config.bot_token)
    router = Dispatcher()
    await bot.delete_webhook(drop_pending_updates=True)
    await router.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(srav_main())
