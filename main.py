import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, html, Router
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

import config
import sravnenie
import lookat_cases
import lookat_money
from kabinet import kabinet

from typing import Callable, Dict, Any, Awaitable
from aiogram.types import CallbackQuery
from aiogram.types.update import Update

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO,format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
last = Router()
bot = Bot(config.bot_token)
dp = Dispatcher()
dp.include_router(sravnenie.router)
dp.include_router(kabinet.router)
dp.include_router(lookat_cases.router)
dp.include_router(lookat_money.router)
# dp.include_router()
dp.include_router(last)

#–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Ignor_user_State(StatesGroup):
    Ignoring = State()



@dp.update.outer_middleware()
async def database_transaction_middleware(
    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
    event: Update,
    data: Dict[str, Any]
) -> Any:
    # print ('event:',event)
    # print ('data:',data
    try:
        print(event.message.date, ' | @', event.message.chat.username, ' | ',event.message.text, ' | ',data['raw_state'])
    except AttributeError:
        print(event.callback_query.message.date,' | @',event.callback_query.message.chat.username, '| –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É', event.callback_query.data)
    except Exception as e:
        logging.Error('def main.database_transaction_middleware', exc_info=True)
        print('event:\n*\n*\n',event,'\n*\n*\n*')
    return await handler(event, data)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def starting_msg(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text='üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã'))
    builder.add(types.KeyboardButton(text='üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã'))
    builder.add(types.KeyboardButton(text='üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã'))
    builder.add(types.KeyboardButton(text='üë®‚Äçüè´ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'))
    builder.adjust(2)
    if message.text == '/start':
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç.\n–ö–∞–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                input_field_placeholder="–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
            )
        )
    else:
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–πüí™üëÄüëç',
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                input_field_placeholder="–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
            )
        )


@dp.message(Command("help"))
async def helping_msg(message: types.Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {html.bold(html.quote(message.from_user.full_name))}, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è "–∫–∞–±–∏–Ω–µ—Ç", '
        f'–≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫ –≤ —Å—Ç–∏–º–µ, –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–≥–æ–¥–Ω–æ '
        f'–∫—É–ø–∏—Ç—å –≥—Ä–µ—á–∫–∏.\n–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start.', parse_mode=ParseMode.HTML,
        reply_markup=types.ReplyKeyboardRemove())


@dp.message(StateFilter(None), Command(commands=["cancel"]))
@dp.message(default_state, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel_no_state(message: types.Message, state: FSMContext):
    # –°—Ç–µ–π—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    await state.set_data({})
    await message.answer(
        text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await starting_msg(message)


@dp.message(Command(commands=["cancel"]))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await starting_msg(message)


@dp.message(F.text == "‚≠ïÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await starting_msg(message)

@dp.message(Ignor_user_State.Ignoring)
async def ignoring_text(message: types.Message, state: FSMContext):
    await message.reply('–ü–æ–¥–æ–∂–¥–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ—à–ª–∞—è –∫–æ–º–∞–Ω–¥–∞')


@dp.callback_query(F.data == "nothing")
async def send_more_info(callback: CallbackQuery):
    await callback.answer()


@last.message()
async def nothing(message: types.Message, state: FSMContext):
    await message.reply('–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω.')
    await state.clear()
    await starting_msg(message)


# @dp.message(Command("dice"))
# async def cmd_dice(message: types.Message):
#     await message.answer_dice("üé≤")
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    dp.update.outer_middleware(SomeMiddleware())


if __name__ == "__main__":
    asyncio.run(main())
