import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.enums import ParseMode

from aiogram.fsm.context import FSMContext
import config

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(config.bot_token)
dp = Dispatcher()


class Sravn_State(StatesGroup):
    Sravnenie_gr_1 = State()
    Sravnenie_price_1 = State()
    Sravnenie_gr_2 = State()
    Sravnenie_price_2 = State()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def starting_msg(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text='üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã'))
    builder.add(types.KeyboardButton(text='üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã'))
    builder.add(types.KeyboardButton(text='üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã'))
    builder.add(types.KeyboardButton(text='üë®‚Äçüè´ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'))
    builder.adjust(2)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç.\n–ö–∞–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
        )
    )


@dp.message(Command("help"))
async def helping_msg(message: types.Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {html.bold(html.quote(message.from_user.full_name))}, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è "–∫–∞–±–∏–Ω–µ—Ç", '
        f'–≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫ –≤ —Å—Ç–∏–º–µ, –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–≥–æ–¥–Ω–æ '
        f'–∫—É–ø–∏—Ç—å –≥—Ä–µ—á–∫–∏.\n–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start.', parse_mode=ParseMode.HTML,
        reply_markup=types.ReplyKeyboardRemove(),
        input_field_placeholder="–ü–∏—à–∏ /start"
    )


@dp.message(F.text == "üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã")
async def sravnenie_cen1(message: types.Message, state: FSMContext):
    print('–∑–∞—à–µ–ª')
    await state.clear()
    await message.answer(text="–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Sravn_State.Sravnenie_gr_1)


@dp.message(F.text, Sravn_State.Sravnenie_gr_1)
async def sravnenie_cen2(message: types.Message, state: FSMContext):
    print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤')
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞
    await state.update_data(gr_1=message.text)
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ, —Å–∫–æ–ª—å–∫–æ –æ–Ω —Å—Ç–æ–∏—Ç?')
    await state.set_state(Sravn_State.Sravnenie_price_1)


@dp.message(F.text, Sravn_State.Sravnenie_price_1)
async def sravnenie_cen2(message: types.Message, state: FSMContext):
    print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã')
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞
    await state.update_data(pr_1=message.text)
    await message.answer('–ê —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?')
    await state.set_state(Sravn_State.Sravnenie_gr_2)


@dp.message(F.text, Sravn_State.Sravnenie_gr_2)
async def sravnenie_cen2(message: types.Message, state: FSMContext):
    print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤2')
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞
    await state.update_data(gr_2=message.text)
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç?')
    await state.set_state(Sravn_State.Sravnenie_price_2)


@dp.message(F.text, Sravn_State.Sravnenie_price_2)
async def sravnenie_cen2(message: types.Message, state: FSMContext):
    print('–∑–∞—à–µ–ª –≤ —Å–æ—Å—Ç–æ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—Ö –≤—Å–µ—Ö')
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞
    await state.update_data(pr_2=message.text)
    user_data = await state.get_data()
    await message.answer(f'{user_data}')
    await state.set_state(Sravn_State.Sravnenie_price_2)


@dp.message()
async def nothing(message: types.Message):
    await message.reply('–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω')
    await starting_msg(message)


@dp.message(StateFilter(None), Command(commands=["cancel"]))
@dp.message(default_state, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel_no_state(message: types.Message, state: FSMContext):
    # –°—Ç–µ–π—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    await state.set_data({})
    await message.answer(
        text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await starting_msg(message)



@dp.message(Command(commands=["cancel"]))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await starting_msg(message)



# @dp.message(Command("dice"))
# async def cmd_dice(message: types.Message):
#     await message.answer_dice("üé≤")
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
